{"meta":{"title":"Lee's Blog","subtitle":"","description":"","author":"unknown","url":"http://ctrl98.github.io","root":"/"},"pages":[{"title":"about","date":"2020-02-25T04:54:31.018Z","updated":"2020-02-25T04:54:31.018Z","comments":true,"path":"about/index.html","permalink":"http://ctrl98.github.io/about/index.html","excerpt":"","text":""},{"title":"All categories","date":"2020-02-25T04:47:45.380Z","updated":"2020-02-25T04:47:45.380Z","comments":true,"path":"categories/index.html","permalink":"http://ctrl98.github.io/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2020-02-25T04:55:08.804Z","updated":"2020-02-25T04:55:08.804Z","comments":true,"path":"tags/index.html","permalink":"http://ctrl98.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Docker基础知识之镜像与容器","slug":"Docker2","date":"2020-02-26T02:26:40.000Z","updated":"2020-02-26T09:30:21.696Z","comments":true,"path":"2020/02/26/Docker2/","link":"","permalink":"http://ctrl98.github.io/2020/02/26/Docker2/","excerpt":"","text":"废话不多说，前提条件是你的电脑已安装Docker和完成了基本的配置，还没有的话开车送你去Docker基础知识 Docker镜像 容器的运行是建立在镜像基础之上，当然前提是docker服务已启动。 先用 查看镜像 的命令查看一下本机有什么镜像，不出意外应该啥也没有： 1docker images 镜像没有没关系，从共有仓库 拉取镜像 下来就行了，先来搜索你需要拉取的镜像，比如我们想搜索一个centos7的镜像： 1docker search +你要搜索的镜像名称(如：centos7) 搜索出来的结果： 搜索到之后就拉取我们需要的镜像，比如我们拉取一个centos7镜像： 1docker pull centos:7(镜像的名字:版本号)&#x2F;(若不指定版本号，默认拉取最新版本) 过了一小会之后就会提示 Pull complete，说明拉取成功。 这时候我们再回头使用查看镜像的命令就会看到centos7的镜像了： 镜像可以拉取当然也可以删除： 1docker rmi centos(要删除的镜像名或者镜像id) 或者哪天不开心想把全部镜像删了： 1docker rmi &#96;docker images -q&#96; Docker容器 首先我们要知道docker容器分为两种，一种是 交互式容器，一种是 守护式容器，实际开发中一般采用守护式容器。 两者本质区别 交互式容器随容器的创建、启动而启动，随容器的退出而关闭。 守护式容器随容器的创建、启动而启动，但退出容器后，容器依然在后台运行。 上面我们已经拉取了centos7镜像，下面我们先了解一下创建容器的相关命令属性： 属性 说明 -i 表示运行 -t 表示容器启动后会进入其命令行，加入这两个参数后，容器创建就能登录进去，即分配一个伪终端 –name 为创建容器的名字 -v 表示目录挂载、映射关系 -d 在run后面加上-d参数，则会创建一个守护式容器在后台运行 -p 表示端口映射 -e 表示添加环境变量 查看容器命令（只能查出正在运行的容器）： 1docker ps 查看全部容器命令： 1docker ps -a 查看容器的IP地址： 1docker inspect 容器名字或id 创建一个交互式容器： 1docker run -it --name&#x3D;mycentos7 centos:7 &#x2F;bin&#x2F;bash 执行后会自动进入我们所创建好的容器—mycentos7，使用 ll 命令，然后退出就会回到本机： 创建一个守护式容器： 1docker run -di --name&#x3D;mycentos2 centos:7 创建成功后查看一下容器列表，发现已经在后台运行了： 下面进入该容器看看（exec表示进入的意思）： 1docker exec -it mycentos2 &#x2F;bin&#x2F;bash 可以看出来和交互式容器没什么区别，当我们执行 exit 命令退出该容器后，再查看一下容器列表，发现该容器依旧在后台运行，刚才创建的交互式容器可以通过 docker ps -a命令查看。 停止守护式容器运行： 1docker stop 容器名称或者id 启动容器： 1docker start 容器名称或者id 目录挂载 将宿主机的目录与容器内的目录进行映射，这样我们就可以通过修改宿主机某个目录的文件从而去影响容器 创建映射目录 1mkdir &#x2F;usr&#x2F;local&#x2F;test 创建并启动一个守护式容器并挂载test目录： 1docker run -di -v &#x2F;usr&#x2F;local&#x2F;test:&#x2F;usr&#x2F;local&#x2F;test --name&#x3D;mycentos3 centos:7 查看容器列表： 我们在宿主机的test目录下新建一个文件： 1touch test.txt 然后进入 mycentos3容器： 1docker exec -it mycentos3 &#x2F;bin&#x2F;bash 进入test目录下查看文件信息： 1cd &#x2F;usr&#x2F;local&#x2F;test 发现在宿主机创建的test.txt文件也同样被创建在容器中挂载的目录下。 删除容器 1docker rm 容器名称 (注意，正在运行中的容器是无法删除的)","categories":[{"name":"容器引擎","slug":"容器引擎","permalink":"http://ctrl98.github.io/categories/%E5%AE%B9%E5%99%A8%E5%BC%95%E6%93%8E/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"http://ctrl98.github.io/tags/Docker/"}]},{"title":"Docker基础知识","slug":"Docker基础知识","date":"2020-02-25T07:46:30.000Z","updated":"2020-02-26T09:33:27.998Z","comments":true,"path":"2020/02/25/Docker基础知识/","link":"","permalink":"http://ctrl98.github.io/2020/02/25/Docker%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/","excerpt":"","text":"Docker 什么是Docker 百度百科：Docker容器是一个应用容器引擎， 让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 linux 或 Windows 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。 说白了就是把应用（项目）部署到Docker容器中运行，就好像放在真实的物理机上运行一样，不用担心开发环境和生产环境的不一致。 为什么要使用Docker Docker 容器的启动可以在秒级实现，这相比传统的虚拟机方式要快得多 。 性能很高 ， 系统的开销尽量小 。 环境一致，让开发人员专注于开发。 应用迁移更便捷。 应用更好维护。 应用场景 web应用的自动打包和发布 自动化测试 可持续集成 安装各种组件 Docker的组成部分 Docker客户端：个人电脑安装的docker软件、用来连接操作docker。 Docker守护进程：例如有容器A、镜像1 （容器时基于镜像来运行的,镜像相当于类，容器则是类的实例）。 Docker镜像：从docker仓库中拉去过来，而docker仓库又分共有(docker hub)和私有仓库。 以下以 centOS7 系统为基础环境讲述 卸载旧的版本 如果你的系统中已经有旧版本，那么就卸载他吧， 较旧的 Docker 版本称为 docker 或 docker-engine，卸载后记得要删除相关依赖项。 更新 yum 源： 1sudo yum update 查看已安装软件是否有Docker： 1yum list installed 或者直接查看有没有安装Docker： 1yum list installed | grep docker 如果有的话卸载及相关依赖： 1yum -y remove docker.x86_64#软件名看你自己的 安装Docker社区版(个人和中小型企业基本够用) 安装先安装需要的软件包： 1sudo yum install -y yum-utils device-mapper-persistent-data lvm2 设置yum源： 1sudo yum-config-manager --add-repo http:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo 如果返回结果如下图表明设置成功： 安装docker： 1sudo yum install -y docker-ce 如果返回结果如下图表明安装成功： 查看docker安装版本： 1docker -v 配置Docker镜像源 创建文件夹： 1mkdir &#x2F;etc&#x2F;docker 使用一下命令编辑内容并创建文件—daemon.json 1cd &#x2F;etc&#x2F;docker 1vi daemon.json 文件内容为： 1&#123;&quot;registry-mirrors&quot;:[&quot;https:&#x2F;&#x2F;docker.mirrors.ustc.edu.cn&quot;]&#125; 镜像也可以用自己的阿里云镜像加速(建议) 编辑完后，按 Esc键，然后按 :，输入 wq，保存文件并退出。 在/etc/docker目录下使用 ll命令查看文件是否创建成功？ Docker基础命令 下面我们来了解一下docker的基础命令 首先是启动docker服务： 1systemctl start docker 停止docker服务： 1systemctl stop docker 查看docker当前状态： 1systemctl status docker 重启docker服务： 1systemctl restart docker 把docker服务设置成开机自动启动： 1systemctl enable docker 到这里说明你已经距离入门还有一大段距离~~~干巴爹斯！！！！","categories":[{"name":"容器引擎","slug":"容器引擎","permalink":"http://ctrl98.github.io/categories/%E5%AE%B9%E5%99%A8%E5%BC%95%E6%93%8E/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"http://ctrl98.github.io/tags/Docker/"}]},{"title":"第一篇博客文章","slug":"First-Blog","date":"2020-02-25T06:41:43.000Z","updated":"2020-02-26T09:38:25.146Z","comments":true,"path":"2020/02/25/First-Blog/","link":"","permalink":"http://ctrl98.github.io/2020/02/25/First-Blog/","excerpt":"","text":"关于 其实很早就想着有一个属于自己的博客网站，来记录一下自己的学习过程和生活琐事，把自己学习到的知识写下来，算是给自己的一个总结和交代。然后也可以把自己生活上遇到的愉快的、难忘的或是不愉快的事情记录下来，以后当自己翻看自己写过的记录过的东西，也不失为一份回忆。","categories":[{"name":"生活","slug":"生活","permalink":"http://ctrl98.github.io/categories/%E7%94%9F%E6%B4%BB/"}],"tags":[{"name":"个人","slug":"个人","permalink":"http://ctrl98.github.io/tags/%E4%B8%AA%E4%BA%BA/"}]}]}